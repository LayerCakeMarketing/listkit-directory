name: Deploy to Listerino Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, pdo, pdo_pgsql, gd, zip
    
    - name: Run PHP Tests
      run: |
        cp .env.example .env
        composer install
        php artisan key:generate
        php artisan test
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # Navigate to application directory
          cd /var/www/listerino
          
          # Pull latest code
          git pull origin main
          
          # Build and update frontend
          cd frontend
          npm ci
          npm run build
          cd ..
          
          # Update backend in Docker
          docker exec listerino_app composer install --optimize-autoloader --no-dev
          
          # Run database migrations
          docker exec listerino_app php artisan migrate --force
          
          # Clear and rebuild all caches
          docker exec listerino_app php artisan cache:clear
          docker exec listerino_app php artisan config:cache
          docker exec listerino_app php artisan route:cache
          docker exec listerino_app php artisan view:cache
          
          # Copy frontend build to container
          docker cp frontend/dist/. listerino_app:/var/www/html/frontend/dist/
          
          # Restart containers if needed
          docker-compose restart
          
          # Health check
          sleep 10
          curl -f https://listerino.com/api/health || exit 1
          
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment to listerino.com ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true