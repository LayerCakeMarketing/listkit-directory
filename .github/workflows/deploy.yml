name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production Server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        cd ..

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          set -e
          echo "üöÄ Starting deployment..."
          
          cd /var/www/listerino
          
          # Backup current state
          echo "üì¶ Creating backup..."
          docker exec listerino_db pg_dump -U listerino listerino > /backups/pre-deploy-$(date +%Y%m%d-%H%M%S).sql || true
          
          # Pull latest code
          echo "üì• Pulling latest code from GitHub..."
          git fetch origin main
          git reset --hard origin/main
          
          # Show current commit for verification
          echo "Current commit: $(git rev-parse HEAD)"
          
          # Update Docker environment file if needed
          if [ -f .env.production ]; then
            cp .env.production .env
          fi
          
          # Restart containers to pick up any docker-compose changes
          echo "üê≥ Updating Docker containers..."
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          
          # Wait for services to be ready
          sleep 10
          
          # Get the app container name - explicitly use listerino_app
          APP_CONTAINER="listerino_app"
          echo "Using app container: $APP_CONTAINER"
          
          # Verify container is running
          docker ps | grep $APP_CONTAINER || exit 1
          
          # Run migrations
          echo "üîÑ Running database migrations..."
          docker exec -w /app $APP_CONTAINER php artisan migrate --force
          
          # Clear and rebuild caches
          echo "üßπ Clearing caches..."
          docker exec -w /app $APP_CONTAINER php artisan config:clear
          docker exec -w /app $APP_CONTAINER php artisan cache:clear
          docker exec -w /app $APP_CONTAINER php artisan route:clear
          docker exec -w /app $APP_CONTAINER php artisan view:clear
          
          echo "üîß Rebuilding caches..."
          docker exec -w /app $APP_CONTAINER php artisan config:cache
          docker exec -w /app $APP_CONTAINER php artisan route:cache
          docker exec -w /app $APP_CONTAINER php artisan view:cache
          
          # Set permissions
          echo "üîê Setting permissions..."
          docker exec $APP_CONTAINER chown -R www-data:www-data /app/storage /app/bootstrap/cache
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Health check (non-failing)
          sleep 5
          if curl -f https://listerino.com/api/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health check failed - this is non-critical"
          fi

    - name: Upload frontend build
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        source: "frontend/dist"
        target: "/var/www/listerino"
        strip_components: 0

    - name: Copy frontend to Docker container
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          cd /var/www/listerino
          # Use explicit container name
          APP_CONTAINER="listerino_app"
          # Copy built frontend to the Docker container
          docker cp frontend/dist/. $APP_CONTAINER:/app/frontend/dist/
          echo "‚úÖ Frontend deployed!"

    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            docker exec -w /app listerino_app php artisan about
          else
            echo "‚ùå Deployment failed!"
            tail -20 /var/www/listerino/storage/logs/laravel.log || true
          fi